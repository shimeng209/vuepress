// src/node/searchPlugin.ts
import { addViteOptimizeDepsInclude, getFullLocaleConfig } from "@vuepress/helper";
import chokidar from "chokidar";
import { getDirname, path } from "vuepress/utils";

// src/node/locales/de.ts
var deSearchLocale = {
  placeholder: "Dokumente durchsuchen",
  resetButtonTitle: "Suche zur\xFCcksetzen",
  backButtonTitle: "Schlie\xDFen",
  noResultsText: "Keine Suchergebnisse:",
  footer: {
    selectText: "Ausw\xE4hlen",
    selectKeyAriaLabel: "Eingabe",
    navigateText: "Wechseln",
    navigateUpKeyAriaLabel: "Nach oben",
    navigateDownKeyAriaLabel: "Nach unten",
    closeText: "Schlie\xDFen",
    closeKeyAriaLabel: "Beenden"
  }
};

// src/node/locales/en.ts
var enSearchLocale = {
  placeholder: "Search",
  resetButtonTitle: "Reset search",
  backButtonTitle: "Close search",
  noResultsText: "No results for",
  footer: {
    selectText: "to select",
    selectKeyAriaLabel: "enter",
    navigateText: "to navigate",
    navigateUpKeyAriaLabel: "up arrow",
    navigateDownKeyAriaLabel: "down arrow",
    closeText: "to close",
    closeKeyAriaLabel: "escape"
  }
};

// src/node/locales/fr.ts
var frSearchLocale = {
  placeholder: "Rechercher dans la documentation",
  resetButtonTitle: "R\xE9initialiser la recherche",
  backButtonTitle: "Fermer",
  noResultsText: "Aucun r\xE9sultat trouv\xE9 :",
  footer: {
    selectText: "s\xE9lectionner",
    selectKeyAriaLabel: "Entr\xE9e",
    navigateText: "naviguer",
    navigateUpKeyAriaLabel: "haut",
    navigateDownKeyAriaLabel: "bas",
    closeText: "fermer",
    closeKeyAriaLabel: "sortie"
  }
};

// src/node/locales/ja.ts
var jaSearchLocale = {
  placeholder: "\u30C9\u30AD\u30E5\u30E1\u30F3\u30C8\u3092\u691C\u7D22",
  resetButtonTitle: "\u691C\u7D22\u3092\u30EA\u30BB\u30C3\u30C8",
  backButtonTitle: "\u9589\u3058\u308B",
  noResultsText: "\u691C\u7D22\u7D50\u679C\u304C\u3042\u308A\u307E\u305B\u3093\uFF1A",
  footer: {
    selectText: "\u9078\u629E",
    selectKeyAriaLabel: "\u5165\u529B",
    navigateText: "\u5207\u308A\u66FF\u3048",
    navigateUpKeyAriaLabel: "\u4E0A\u3078",
    navigateDownKeyAriaLabel: "\u4E0B\u3078",
    closeText: "\u9589\u3058\u308B",
    closeKeyAriaLabel: "\u7D42\u4E86"
  }
};

// src/node/locales/ru.ts
var ruSearchLocale = {
  placeholder: "\u041F\u043E\u0438\u0441\u043A \u043F\u043E \u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430\u0446\u0438\u0438",
  resetButtonTitle: "\u0421\u0431\u0440\u043E\u0441\u0438\u0442\u044C \u043F\u043E\u0438\u0441\u043A",
  backButtonTitle: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C",
  noResultsText: "\u041D\u0435\u0442 \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u043E\u0432 \u043F\u043E\u0438\u0441\u043A\u0430:",
  footer: {
    selectText: "\u0412\u044B\u0431\u0440\u0430\u0442\u044C",
    selectKeyAriaLabel: "\u0412\u0432\u043E\u0434",
    navigateText: "\u041F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0438\u0442\u044C",
    navigateUpKeyAriaLabel: "\u0412\u0432\u0435\u0440\u0445",
    navigateDownKeyAriaLabel: "\u0412\u043D\u0438\u0437",
    closeText: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C",
    closeKeyAriaLabel: "\u0412\u044B\u0445\u043E\u0434"
  }
};

// src/node/locales/zh-tw.ts
var zhTwSearchLocale = {
  placeholder: "\u641C\u7D22\u6587\u6A94",
  resetButtonTitle: "\u91CD\u7F6E\u641C\u7D22",
  backButtonTitle: "\u95DC\u9589",
  noResultsText: "\u7121\u641C\u7D22\u7D50\u679C\uFF1A",
  footer: {
    selectText: "\u9078\u64C7",
    selectKeyAriaLabel: "\u8F38\u5165",
    navigateText: "\u5207\u63DB",
    navigateUpKeyAriaLabel: "\u5411\u4E0A",
    navigateDownKeyAriaLabel: "\u5411\u4E0B",
    closeText: "\u95DC\u9589",
    closeKeyAriaLabel: "\u9000\u51FA"
  }
};

// src/node/locales/zh.ts
var zhSearchLocale = {
  placeholder: "\u641C\u7D22\u6587\u6863",
  resetButtonTitle: "\u91CD\u7F6E\u641C\u7D22",
  backButtonTitle: "\u5173\u95ED",
  noResultsText: "\u65E0\u641C\u7D22\u7ED3\u679C\uFF1A",
  footer: {
    selectText: "\u9009\u62E9",
    selectKeyAriaLabel: "\u8F93\u5165",
    navigateText: "\u5207\u6362",
    navigateUpKeyAriaLabel: "\u5411\u4E0A",
    navigateDownKeyAriaLabel: "\u5411\u4E0B",
    closeText: "\u5173\u95ED",
    closeKeyAriaLabel: "\u9000\u51FA"
  }
};

// src/node/locales/index.ts
var SEARCH_LOCALES = [
  [["en", "en-US"], enSearchLocale],
  [["zh", "zh-CN", "zh-Hans", "zh-Hant"], zhSearchLocale],
  [["zh-TW"], zhTwSearchLocale],
  [["de", "de-DE"], deSearchLocale],
  [["fr", "fr-FR"], frSearchLocale],
  [["ru", "ru-RU"], ruSearchLocale],
  [["ja", "ja-JP"], jaSearchLocale]
];

// src/node/prepareSearchIndex.ts
import MiniSearch from "minisearch";
import pMap from "p-map";
import { colors, logger } from "vuepress/utils";
var SEARCH_INDEX_DIR = "internal/minisearchIndex/";
var indexByLocales = /* @__PURE__ */ new Map();
var indexCache = /* @__PURE__ */ new Map();
function getIndexByLocale(locale, options) {
  let index = indexByLocales.get(locale);
  if (!index) {
    index = new MiniSearch({
      fields: ["title", "titles", "text"],
      storeFields: ["title", "titles"],
      ...options.miniSearch?.options
    });
    indexByLocales.set(locale, index);
  }
  return index;
}
function getIndexCache(filepath) {
  let index = indexCache.get(filepath);
  if (!index) {
    index = [];
    indexCache.set(filepath, index);
  }
  return index;
}
async function prepareSearchIndex({
  app,
  isSearchable,
  searchOptions
}) {
  const start = performance.now();
  const pages = isSearchable ? app.pages.filter(isSearchable) : app.pages;
  await pMap(pages, (p) => indexFile(p, searchOptions), {
    concurrency: 64
  });
  await writeTemp(app);
  if (app.env.isDebug) {
    logger.info(
      `
[${colors.green("@vuepress-plume/plugin-search")}] prepare search time spent: ${(performance.now() - start).toFixed(2)}ms`
    );
  }
}
async function onSearchIndexUpdated(filepath, {
  app,
  isSearchable,
  searchOptions
}) {
  const pages = isSearchable ? app.pages.filter(isSearchable) : app.pages;
  if (pages.some((p) => p.filePathRelative?.endsWith(filepath))) {
    await indexFile(app.pages.find((p) => p.filePathRelative?.endsWith(filepath)), searchOptions);
    await writeTemp(app);
  }
}
async function onSearchIndexRemoved(filepath, {
  app,
  isSearchable,
  searchOptions
}) {
  const pages = isSearchable ? app.pages.filter(isSearchable) : app.pages;
  if (pages.some((p) => p.filePathRelative?.endsWith(filepath))) {
    const page = app.pages.find((p) => p.filePathRelative?.endsWith(filepath));
    const fileId = page.path;
    const locale = page.pathLocale;
    const index = getIndexByLocale(locale, searchOptions);
    const cache = getIndexCache(fileId);
    if (cache && cache.length)
      index.removeAll(cache);
    await writeTemp(app);
  }
}
async function writeTemp(app) {
  const records = [];
  for (const [locale] of indexByLocales) {
    const index = indexByLocales.get(locale);
    const localeName = locale.replace(/^\/|\/$/g, "").replace(/\//g, "_") || "default";
    const filename = `searchBox-${localeName}.js`;
    records.push(`${JSON.stringify(locale)}: () => import('@${SEARCH_INDEX_DIR}${filename}')`);
    await app.writeTemp(
      `${SEARCH_INDEX_DIR}${filename}`,
      `export default ${JSON.stringify(
        JSON.stringify(index) ?? {}
      )}`
    );
  }
  await app.writeTemp(
    `${SEARCH_INDEX_DIR}index.js`,
    `export const searchIndex = {${records.join(",")}}${app.env.isDev ? `
${genHmrCode("searchIndex")}` : ""}`
  );
}
async function indexFile(page, options) {
  if (!page.filePath)
    return;
  if (page.frontmatter?.search === false)
    return;
  const fileId = page.path;
  const locale = page.pathLocale;
  const index = getIndexByLocale(locale, options);
  const cache = getIndexCache(fileId);
  const html = `<h1><a href="#"><span>${page.frontmatter.title || page.title}</span></a></h1>
${page.contentRendered}`;
  const sections = splitPageIntoSections(html);
  if (cache && cache.length)
    index.removeAll(cache);
  for await (const section of sections) {
    if (!section || !(section.text || section.titles))
      break;
    const { anchor, text, titles } = section;
    const id = anchor ? [fileId, anchor].join("#") : fileId;
    const item = {
      id,
      text,
      title: titles.at(-1),
      titles: titles.slice(0, -1)
    };
    index.add(item);
    cache.push(item);
  }
}
var headingRegex = /<h(\d*).*?>(<a.*? href="#.*?".*?>[\s\S]*?<\/a>)<\/h\1>/gi;
var headingContentRegex = /<a.*? href="#(.*?)".*?><span>([\s\S]*?)<\/span><\/a>/i;
var ignoreHeadingRegex = /<template[^>]*>[\s\S]*<\/template>/gi;
function* splitPageIntoSections(html) {
  const result = html.split(headingRegex);
  result.shift();
  let parentTitles = [];
  for (let i = 0; i < result.length; i += 3) {
    const level = Number.parseInt(result[i]) - 1;
    const heading = result[i + 1];
    const headingResult = headingContentRegex.exec(heading);
    const title = clearHtmlTags(headingResult?.[2] ?? "").trim();
    const anchor = headingResult?.[1] ?? "";
    const content = result[i + 2];
    if (!title || !content)
      continue;
    if (level === 0)
      parentTitles = [title];
    else
      parentTitles[level] = title;
    let titles = parentTitles.slice(0, level);
    titles[level] = title;
    titles = titles.filter(Boolean);
    yield { anchor, titles, text: getSearchableText(content) };
  }
}
function getSearchableText(content) {
  content = clearHtmlTags(content);
  return content;
}
function clearHtmlTags(str) {
  str = str.replace(ignoreHeadingRegex, "");
  return str.replace(/<[^>]*>/g, "");
}
function genHmrCode(m) {
  const func = `update${m[0].toUpperCase()}${m.slice(1)}`;
  return `
if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.${m}) {
    __VUE_HMR_RUNTIME__.${func}(${m})
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ ${m} }) => {
    __VUE_HMR_RUNTIME__.${func}(${m})
  })
}
`;
}

// src/node/searchPlugin.ts
var __dirname = getDirname(import.meta.url);
function searchPlugin({
  locales = {},
  isSearchable,
  ...searchOptions
} = {}) {
  return (app) => ({
    name: "@vuepress-plume/plugin-search",
    clientConfigFile: path.resolve(__dirname, "../client/config.js"),
    define: {
      __SEARCH_LOCALES__: getFullLocaleConfig({
        app,
        name: "@vuepress-plume/plugin-search",
        default: SEARCH_LOCALES,
        config: locales
      }),
      __SEARCH_OPTIONS__: searchOptions
    },
    extendsBundlerOptions(bundlerOptions) {
      addViteOptimizeDepsInclude(bundlerOptions, app, ["mark.js/src/vanilla.js", "@vueuse/integrations/useFocusTrap", "minisearch"]);
    },
    onPrepared: (app2) => prepareSearchIndex({ app: app2, isSearchable, searchOptions }),
    onWatched: (app2, watchers) => {
      const searchIndexWatcher = chokidar.watch("pages/**/*.js", {
        cwd: app2.dir.temp(),
        ignoreInitial: true
      });
      searchIndexWatcher.on("add", (filepath) => {
        onSearchIndexUpdated(filepath, { app: app2, isSearchable, searchOptions });
      });
      searchIndexWatcher.on("change", (filepath) => {
        onSearchIndexUpdated(filepath, { app: app2, isSearchable, searchOptions });
      });
      searchIndexWatcher.on("unlink", (filepath) => {
        onSearchIndexRemoved(filepath, { app: app2, isSearchable, searchOptions });
      });
      watchers.push(searchIndexWatcher);
    }
  });
}

// src/node/index.ts
export * from "../shared/index.js";
export {
  prepareSearchIndex,
  searchPlugin
};
