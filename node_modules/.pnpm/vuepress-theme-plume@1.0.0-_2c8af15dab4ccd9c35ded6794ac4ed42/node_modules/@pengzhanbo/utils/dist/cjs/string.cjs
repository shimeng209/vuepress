"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CASE_SPLIT_PATTERN = void 0;
exports.camelCase = camelCase;
exports.capitalize = capitalize;
exports.ensurePrefix = ensurePrefix;
exports.ensureSuffix = ensureSuffix;
exports.kebabCase = kebabCase;
exports.lowerCase = lowerCase;
exports.pascalCase = pascalCase;
exports.slash = slash;
exports.snakeCase = snakeCase;
exports.upperCase = upperCase;
exports.words = words;
function slash(s) {
  return s.replace(/\\/g, "/");
}
function ensurePrefix(prefix, str) {
  if (str.startsWith(prefix)) return str;
  return prefix + str;
}
function ensureSuffix(suffix, str) {
  if (str.endsWith(suffix)) return str;
  return str + suffix;
}
const CASE_SPLIT_PATTERN = /\p{Lu}?\p{Ll}+|\d+|\p{Lu}+(?!\p{Ll})|[\p{Emoji_Presentation}\p{Extended_Pictographic}]|\p{L}+/gu;
exports.CASE_SPLIT_PATTERN = CASE_SPLIT_PATTERN;
function words(str) {
  return Array.from(str.match(CASE_SPLIT_PATTERN) ?? []);
}
function capitalize(s) {
  if (!s) return s;
  return s[0].toUpperCase() + s.slice(1).toLowerCase();
}
function kebabCase(str) {
  const parts = words(str);
  if (parts.length === 0) return "";
  return parts.map(word => word.toLowerCase()).join("-");
}
function snakeCase(str) {
  const parts = words(str);
  if (parts.length === 0) return "";
  return parts.map(word => word.toLowerCase()).join("_");
}
function camelCase(str) {
  const parts = words(str);
  if (parts.length === 0) return "";
  const [first, ...rest] = parts;
  return `${first.toLowerCase()}${rest.map(word => capitalize(word)).join("")}`;
}
function lowerCase(str) {
  const parts = words(str);
  if (parts.length === 0) return "";
  return parts.map(word => word.toLowerCase()).join(" ");
}
function upperCase(str) {
  const parts = words(str);
  if (parts.length === 0) return "";
  return parts.map(word => word.toUpperCase()).join(" ");
}
function pascalCase(str) {
  const parts = words(str);
  if (parts.length === 0) return "";
  return parts.map(word => capitalize(word)).join("");
}