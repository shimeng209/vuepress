import * as vue from 'vue';
import { MaybeRef } from 'vue';

interface BufferedRange {
    start: number;
    end: number;
}
interface AudioPlayerOptions {
    type?: MaybeRef<string>;
    autoplay?: boolean;
    mutex?: boolean;
    onload?: HTMLAudioElement['onload'];
    onerror?: HTMLAudioElement['onerror'];
    onpause?: HTMLAudioElement['onpause'];
    onplay?: HTMLAudioElement['onplay'];
    onplaying?: HTMLAudioElement['onplaying'];
    onseeked?: HTMLAudioElement['onseeked'];
    onvolume?: (volume: number) => void;
    onend?: HTMLAudioElement['onended'];
    onprogress?: (current: number, total: number) => void;
    oncanplay?: HTMLAudioElement['oncanplay'];
    oncanplaythrough?: HTMLAudioElement['oncanplaythrough'];
    ontimeupdate?: (currentTime: number) => void;
    onwaiting?: HTMLAudioElement['onwaiting'];
}
declare function useAudioPlayer(source: MaybeRef<string>, options?: AudioPlayerOptions): {
    isSupported: vue.Ref<boolean, boolean>;
    paused: vue.Ref<boolean, boolean>;
    loaded: vue.Ref<boolean, boolean>;
    currentTime: vue.Ref<number, number>;
    duration: vue.Ref<number, number>;
    player: null;
    destroy: () => void;
    play: () => void;
    pause: () => void | undefined;
    seek(time: number): void;
    setVolume(volume: number): void;
};

export { type AudioPlayerOptions, type BufferedRange, useAudioPlayer };
