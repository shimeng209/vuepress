import { getTypeName } from "./common.mjs";
export function isDef(v) {
  return typeof v !== "undefined";
}
export function isBoolean(v) {
  return typeof v === "boolean";
}
export function isFunction(v) {
  return typeof v === "function";
}
export function isNumber(v) {
  return typeof v === "number";
}
export function isString(v) {
  return typeof v === "string";
}
export function isSymbol(v) {
  return typeof v === "symbol";
}
export function isPlainObject(v) {
  return getTypeName(v) === "object";
}
export function isArray(v) {
  return Array.isArray(v);
}
export function isUndefined(v) {
  return typeof v === "undefined";
}
export function isNull(v) {
  return getTypeName(v) === "null";
}
export function isRegexp(v) {
  return getTypeName(v) === "regexp";
}
export function isDate(v) {
  return getTypeName(v) === "date";
}
export function isEmptyObject(v) {
  if (!isPlainObject(v))
    return false;
  for (const _ in v)
    return false;
  return true;
}
export function isBlob(v) {
  /* istanbul ignore if -- @preserve */
  if (typeof Blob === "undefined")
    return false;
  return v instanceof Blob;
}
export function isWindow(v) {
  /* istanbul ignore next -- @preserve */
  return typeof v !== "undefined" && getTypeName(v) === "window";
}
export function isBrowser() {
  /* istanbul ignore next -- @preserve */
  return typeof window !== "undefined";
}
export function isJSONObject(obj) {
  if (!isPlainObject(obj)) {
    return false;
  }
  const keys = Reflect.ownKeys(obj);
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i];
    const value = obj[key];
    /* istanbul ignore if -- @preserve */
    if (typeof key !== "string") {
      return false;
    }
    if (!isJSONValue(value)) {
      return false;
    }
  }
  return true;
}
export function isJSONArray(value) {
  if (!Array.isArray(value)) {
    return false;
  }
  return value.every((item) => isJSONValue(item));
}
export function isJSONValue(value) {
  switch (typeof value) {
    case "object": {
      return value === null || isJSONArray(value) || isJSONObject(value);
    }
    case "string":
    case "number":
    case "boolean":
      return true;
    default:
      return false;
  }
}
