"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isArray = isArray;
exports.isBlob = isBlob;
exports.isBoolean = isBoolean;
exports.isBrowser = isBrowser;
exports.isDate = isDate;
exports.isDef = isDef;
exports.isEmptyObject = isEmptyObject;
exports.isFunction = isFunction;
exports.isJSONArray = isJSONArray;
exports.isJSONObject = isJSONObject;
exports.isJSONValue = isJSONValue;
exports.isNull = isNull;
exports.isNumber = isNumber;
exports.isPlainObject = isPlainObject;
exports.isRegexp = isRegexp;
exports.isString = isString;
exports.isSymbol = isSymbol;
exports.isUndefined = isUndefined;
exports.isWindow = isWindow;
var _common = require("./common.cjs");
function isDef(v) {
  return typeof v !== "undefined";
}
function isBoolean(v) {
  return typeof v === "boolean";
}
function isFunction(v) {
  return typeof v === "function";
}
function isNumber(v) {
  return typeof v === "number";
}
function isString(v) {
  return typeof v === "string";
}
function isSymbol(v) {
  return typeof v === "symbol";
}
function isPlainObject(v) {
  return (0, _common.getTypeName)(v) === "object";
}
function isArray(v) {
  return Array.isArray(v);
}
function isUndefined(v) {
  return typeof v === "undefined";
}
function isNull(v) {
  return (0, _common.getTypeName)(v) === "null";
}
function isRegexp(v) {
  return (0, _common.getTypeName)(v) === "regexp";
}
function isDate(v) {
  return (0, _common.getTypeName)(v) === "date";
}
function isEmptyObject(v) {
  if (!isPlainObject(v)) return false;
  for (const _ in v) return false;
  return true;
}
function isBlob(v) {
  /* istanbul ignore if -- @preserve */
  if (typeof Blob === "undefined") return false;
  return v instanceof Blob;
}
function isWindow(v) {
  /* istanbul ignore next -- @preserve */
  return typeof v !== "undefined" && (0, _common.getTypeName)(v) === "window";
}
function isBrowser() {
  /* istanbul ignore next -- @preserve */
  return typeof window !== "undefined";
}
function isJSONObject(obj) {
  if (!isPlainObject(obj)) {
    return false;
  }
  const keys = Reflect.ownKeys(obj);
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i];
    const value = obj[key];
    /* istanbul ignore if -- @preserve */
    if (typeof key !== "string") {
      return false;
    }
    if (!isJSONValue(value)) {
      return false;
    }
  }
  return true;
}
function isJSONArray(value) {
  if (!Array.isArray(value)) {
    return false;
  }
  return value.every(item => isJSONValue(item));
}
function isJSONValue(value) {
  switch (typeof value) {
    case "object":
      {
        return value === null || isJSONArray(value) || isJSONObject(value);
      }
    case "string":
    case "number":
    case "boolean":
      return true;
    default:
      return false;
  }
}